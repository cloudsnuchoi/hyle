# Admin Dashboard Schema for Amplify GraphQL

type AdminQuest @model @auth(rules: [
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
  { allow: private, operations: [read] }
]) {
  id: ID!
  titleKo: String!
  titleEn: String!
  descriptionKo: String!
  descriptionEn: String!
  type: QuestTypeEnum!
  difficulty: DifficultyEnum!
  xpReward: Int!
  coinReward: Int!
  specialReward: String
  targetValue: Int!
  trackingType: String!
  iconName: String!
  colorHex: String!
  isActive: Boolean!
  startDate: AWSDateTime
  endDate: AWSDateTime
  metadata: AWSJSON
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type QuestAnalytics @model @auth(rules: [
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
]) {
  id: ID!
  questId: ID! @index(name: "byQuest")
  date: AWSDate!
  totalAccepted: Int!
  totalCompleted: Int!
  totalAbandoned: Int!
  completionRate: Float!
  averageCompletionTime: Float!
  completionByDifficulty: AWSJSON!
  completionByUserLevel: AWSJSON!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type UserQuestProgress @model @auth(rules: [
  { allow: owner }
  { allow: groups, groups: ["Admins"], operations: [read] }
]) {
  id: ID!
  userId: ID! @index(name: "byUser")
  questId: ID! @index(name: "byQuest")
  status: QuestStatusEnum!
  currentValue: Int!
  acceptedAt: AWSDateTime
  completedAt: AWSDateTime
  claimedAt: AWSDateTime
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type AdminAnnouncement @model @auth(rules: [
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
  { allow: private, operations: [read] }
]) {
  id: ID!
  titleKo: String!
  titleEn: String!
  contentKo: String!
  contentEn: String!
  type: AnnouncementTypeEnum!
  startDate: AWSDateTime!
  endDate: AWSDateTime!
  targetUserGroups: [String]
  isActive: Boolean!
  priority: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type AppConfiguration @model @auth(rules: [
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
  { allow: private, operations: [read] }
]) {
  id: ID!
  features: AWSJSON!
  limits: AWSJSON!
  rewards: AWSJSON!
  endpoints: AWSJSON!
  version: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type UserAnalyticsSummary @model @auth(rules: [
  { allow: owner }
  { allow: groups, groups: ["Admins"], operations: [read] }
]) {
  id: ID!
  userId: ID! @index(name: "byUser")
  date: AWSDate! @index(name: "byDate")
  totalXP: Int!
  studyMinutes: Int!
  questsCompleted: Int!
  todosCompleted: Int!
  notesCreated: Int!
  pomodoroSessions: Int!
  streakDays: Int!
  metadata: AWSJSON
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum QuestTypeEnum {
  DAILY
  WEEKLY
  SPECIAL
  ACHIEVEMENT
}

enum DifficultyEnum {
  EASY
  MEDIUM
  HARD
}

enum QuestStatusEnum {
  AVAILABLE
  ACCEPTED
  COMPLETED
  CLAIMED
  EXPIRED
}

enum AnnouncementTypeEnum {
  INFO
  WARNING
  SUCCESS
  EVENT
  MAINTENANCE
}

# Admin-specific queries
type Query {
  getQuestAnalyticsSummary(questId: ID!, dateRange: DateRangeInput): QuestAnalyticsSummary
    @auth(rules: [{ allow: groups, groups: ["Admins"] }])
    @function(name: "getQuestAnalyticsSummary-${env}")
  
  getUserAnalyticsSummary(userId: ID!, dateRange: DateRangeInput): UserAnalyticsSummaryResponse
    @auth(rules: [{ allow: groups, groups: ["Admins"] }])
    @function(name: "getUserAnalyticsSummary-${env}")
  
  getActiveUsers(limit: Int, nextToken: String): ActiveUsersResponse
    @auth(rules: [{ allow: groups, groups: ["Admins"] }])
    @function(name: "getActiveUsers-${env}")
}

input DateRangeInput {
  startDate: AWSDate!
  endDate: AWSDate!
}

type QuestAnalyticsSummary {
  questId: ID!
  totalUsers: Int!
  completionRate: Float!
  averageTime: Float!
  dailyMetrics: [DailyMetric]!
}

type DailyMetric {
  date: AWSDate!
  accepted: Int!
  completed: Int!
  abandoned: Int!
}

type UserAnalyticsSummaryResponse {
  userId: ID!
  summary: UserSummary!
  questProgress: [QuestProgressItem]!
  learningPatterns: AWSJSON!
}

type UserSummary {
  level: Int!
  totalXP: Int!
  totalStudyMinutes: Int!
  currentStreak: Int!
  questsCompleted: Int!
  lastActiveDate: AWSDateTime!
}

type QuestProgressItem {
  questId: ID!
  status: QuestStatusEnum!
  progress: Float!
  completedAt: AWSDateTime
}

type ActiveUsersResponse {
  users: [ActiveUserItem]!
  nextToken: String
  total: Int!
}

type ActiveUserItem {
  userId: ID!
  username: String!
  level: Int!
  lastActive: AWSDateTime!
  totalXP: Int!
}