AWSTemplateFormatVersion: '2010-09-09'
Description: 'Hyle Learning Platform - Additional AWS Infrastructure'

Parameters:
  env:
    Type: String
    Default: dev
  
Resources:
  # Neptune Graph Database
  NeptuneDBSubnetGroup:
    Type: AWS::Neptune::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Neptune
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub 'hyle-neptune-subnet-group-${env}'

  NeptuneDBCluster:
    Type: AWS::Neptune::DBCluster
    Properties:
      DBClusterIdentifier: !Sub 'hyle-neptune-cluster-${env}'
      DBSubnetGroupName: !Ref NeptuneDBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref NeptuneSecurityGroup
      IamAuthEnabled: true
      StorageEncrypted: true
      BackupRetentionPeriod: 7
      PreferredBackupWindow: "03:00-04:00"
      PreferredMaintenanceWindow: "sun:04:00-sun:05:00"

  NeptuneDBInstance:
    Type: AWS::Neptune::DBInstance
    Properties:
      DBInstanceClass: db.t3.medium
      DBClusterIdentifier: !Ref NeptuneDBCluster
      DBInstanceIdentifier: !Sub 'hyle-neptune-instance-${env}'

  # Kinesis Data Stream
  StudyEventStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub 'hyle-study-events-${env}'
      ShardCount: 2
      RetentionPeriodHours: 24
      StreamModeDetails:
        StreamMode: PROVISIONED
      Tags:
        - Key: Name
          Value: !Sub 'hyle-kinesis-stream-${env}'

  # Kinesis Analytics Application
  StudyAnalyticsApplication:
    Type: AWS::KinesisAnalytics::Application
    Properties:
      ApplicationName: !Sub 'hyle-analytics-${env}'
      Inputs:
        - NamePrefix: SOURCE_SQL_STREAM
          KinesisStreamsInput:
            ResourceARN: !GetAtt StudyEventStream.Arn
            RoleARN: !GetAtt KinesisAnalyticsRole.Arn
          InputSchema:
            RecordColumns:
              - Name: userId
                SqlType: VARCHAR(64)
                Mapping: $.userId
              - Name: eventType
                SqlType: VARCHAR(32)
                Mapping: $.eventType
              - Name: timestamp
                SqlType: TIMESTAMP
                Mapping: $.timestamp
              - Name: data
                SqlType: VARCHAR(1024)
                Mapping: $.data
            RecordFormat:
              RecordFormatType: JSON
              MappingParameters:
                JSONMappingParameters:
                  RecordRowPath: "$"

  # SageMaker Execution Role
  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:ListBucket'
                Resource:
                  - !Sub 'arn:aws:s3:::hyle-ml-models-${env}'
                  - !Sub 'arn:aws:s3:::hyle-ml-models-${env}/*'

  # S3 Bucket for ML Models
  MLModelsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'hyle-ml-models-${env}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # EventBridge Rules for Scheduled Tasks
  DailyMissionResetRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'hyle-daily-mission-reset-${env}'
      Description: 'Reset daily missions at 4 AM KST'
      ScheduleExpression: 'cron(0 19 * * ? *)' # 4 AM KST = 7 PM UTC
      State: ENABLED
      Targets:
        - Arn: !GetAtt DailyMissionResetFunction.Arn
          Id: '1'

  WeeklyInsightsRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'hyle-weekly-insights-${env}'
      Description: 'Generate weekly insights every Monday'
      ScheduleExpression: 'cron(0 15 ? * MON *)' # Monday midnight KST
      State: ENABLED
      Targets:
        - Arn: !GetAtt WeeklyInsightsFunction.Arn
          Id: '1'

  SmartReminderRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'hyle-smart-reminders-${env}'
      Description: 'Check and send smart reminders hourly'
      ScheduleExpression: 'rate(1 hour)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt SmartReminderFunction.Arn
          Id: '1'

  # Lambda Functions for Scheduled Tasks
  DailyMissionResetFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'hyle-daily-mission-reset-${env}'
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Resetting daily missions...');
            // Implementation will be added
            return { statusCode: 200 };
          };
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      MemorySize: 256

  WeeklyInsightsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'hyle-weekly-insights-${env}'
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Generating weekly insights...');
            // Implementation will be added
            return { statusCode: 200 };
          };
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512

  SmartReminderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'hyle-smart-reminders-${env}'
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Checking and sending smart reminders...');
            // Implementation will be added
            return { statusCode: 200 };
          };
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 120
      MemorySize: 256

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                Resource: '*'
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'bedrock:InvokeModel'
                  - 'bedrock:InvokeModelWithResponseStream'
                Resource: '*'
        - PolicyName: NeptuneAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'neptune-db:*'
                Resource: '*'

  # Kinesis Analytics Role
  KinesisAnalyticsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - kinesisanalytics.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonKinesisAnalyticsFullAccess

  # Neptune Security Group
  NeptuneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Neptune
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8182
          ToPort: 8182
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  # Lambda Security Group
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VPC

  # VPC for Neptune
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub 'hyle-vpc-${env}'

  # Private Subnets for Neptune
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']

  # Permissions for EventBridge
  PermissionForEventsToInvokeLambda1:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DailyMissionResetFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DailyMissionResetRule.Arn

  PermissionForEventsToInvokeLambda2:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WeeklyInsightsFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WeeklyInsightsRule.Arn

  PermissionForEventsToInvokeLambda3:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SmartReminderFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SmartReminderRule.Arn

Outputs:
  NeptuneEndpoint:
    Value: !GetAtt NeptuneDBCluster.Endpoint
    Description: Neptune cluster endpoint
    Export:
      Name: !Sub '${env}-NeptuneEndpoint'

  NeptunePort:
    Value: !GetAtt NeptuneDBCluster.Port
    Description: Neptune cluster port
    Export:
      Name: !Sub '${env}-NeptunePort'

  KinesisStreamArn:
    Value: !GetAtt StudyEventStream.Arn
    Description: Kinesis stream ARN
    Export:
      Name: !Sub '${env}-KinesisStreamArn'

  MLModelsBucketName:
    Value: !Ref MLModelsBucket
    Description: S3 bucket for ML models
    Export:
      Name: !Sub '${env}-MLModelsBucket'