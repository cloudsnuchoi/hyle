PRD를 분석해보니 정말 체계적인 인문논술 채점 플랫폼이네요! Claude Code의 plan mode에서 사용할 프롬프트를 작성해드리겠습니다. 전체 시스템을 단계적으로 구축할 수 있도록 구성했습니다.

## Claude Code Plan Mode 프롬프트

```markdown
# 온톨로지+RAG 기반 인문논술 채점·피드백 플랫폼 구축

## 프로젝트 개요
한국 대학 인문논술 기출문제를 온톨로지화하고, 정답 그래프(NAG)를 통해 학생 답안을 자동 채점하는 플랫폼을 구축합니다. GraphRAG와 LLM을 활용한 정밀 채점과 개인화된 피드백을 제공합니다.

## 기술 스택
- Frontend: Next.js 14 (App Router), Tailwind CSS, shadcn/ui, Zustand
- Backend: Supabase (Postgres + pgvector), Next.js Route Handlers
- AI/ML: OpenAI (text-embedding-3-large, GPT-4), NLI 분류기
- 추가: Flutter 연동 준비, Upstash (Queue/Rate Limit), Sentry

## 핵심 기능 요구사항

### 1. 데이터베이스 설계 및 구축
- pgvector 확장을 포함한 Supabase 스키마 생성
- 온톨로지 테이블: universities, exams, questions, passages
- 루브릭 시스템: rubrics, rubric_criteria (thesis/evidence/source_use/organization/style/compliance)
- 출제경향 온톨로지: themes, task_types, cognitive_levels, source_forms, rubric_focuses
- NAG(정답 그래프): nag_nodes (claim/evidence/counter/assumption/constraint/example), nag_edges
- 채점 시스템: student_submissions, submission_spans, span_alignment, scores, feedback
- GraphRAG용 벡터 인덱스: index_items with embedding vector(1536)
- RLS 정책 구현 (학생별 접근 제어)

### 2. 채점 파이프라인 구현
1. 프리체크: 글자수/문단수/금칙어 검사
2. 텍스트 세분화: 문장/문단 분할, 담화 역할 태깅
3. NAG 정렬: 스팬과 노드 간 NLI + 임베딩 유사도 계산
4. 기준별 점수: 루브릭 가중치 × 정합도 × 품질 피처
5. LLM 합의 채점: 3회 독립 평가 후 중위수 (QWK ≥ 0.75 목표)
6. 검증기: 제시문 근거 하이라이트, 오독 탐지
7. 코칭 피드백: JSON 스키마 기반 구조화 피드백

### 3. GraphRAG 시스템
- 인덱싱: rubric_criteria, NAG 필수 노드, exemplars, error_catalog
- 검색 전략: 질문ID + 스팬 키프레이즈로 노드 단위 소량 주입
- 할루시네이션 억제를 위한 JSON Schema 강제

### 4. API 엔드포인트
- GET /api/questions: 문항 목록/필터링
- GET /api/questions/:id: 문항 상세 + NAG
- POST /api/submit: 답안 제출
- POST /api/grade: 채점 실행 (비동기 처리)
- GET /api/submissions/:id: 채점 결과 조회
- GET /api/trends: 출제경향 분석
- POST /api/mock/generate: 모의문항 생성
- POST /api/mock/approve: 모의문항 검수/배포

### 5. 학생 대시보드
- 실시간 프리체크 알림
- 기준별 점수 시각화
- 근거 하이라이트 (스팬 단위)
- 누락 노드 표시
- 코칭 미션 제공
- 리비전 이력 비교
- 약점 히트맵
- 대학별 경향 맞춤 추천

### 6. 관리자/강사 도구
- 기출 문제 입력/온톨로지 태깅 폼
- NAG 에디터 (노드/엣지/가중치 설정)
- 출제경향 리포트 (대학/년도/주제별 분석)
- 모의문항 템플릿 + LLM 생성
- QWK/편향 모니터링 대시보드

### 7. 성능 최적화 및 모니터링
- Upstash QStash로 대량 채점 큐 처리
- 채점 캐싱 전략
- Sentry 에러/성능 추적
- QWK 실시간 모니터링
- 편향 테스트 자동화

## 개발 우선순위

### Phase 1 (Week 1-2): 기반 구축
1. Supabase 프로젝트 설정 및 스키마 생성
2. 마스터 데이터 입력 (themes, task_types 등)
3. Next.js 프로젝트 초기 설정
4. 기본 인증/권한 시스템

### Phase 2 (Week 3-4): 핵심 채점 시스템
1. NAG 에디터 MVP
2. GraphRAG 인덱싱 파이프라인
3. 프리체크/세분화/정렬 구현
4. LLM 채점 프롬프트 v1

### Phase 3 (Week 5-6): 고도화
1. 합의 채점 시스템
2. 검증기/코치 피드백
3. QWK/편향 대시보드
4. 모의문항 생성 워크플로우

### Phase 4 (Week 7-8): 마무리
1. 성능 최적화
2. Flutter API 준비
3. 베타 테스트 (30-50명)
4. 보안 점검

## 추가 고려사항
- 저작권: 기출문제는 링크+요약만 저장
- 개인정보: PII 최소화, 학생 텍스트만 보관
- 확장성: 초기 3개 대학 × 3개년 → 점진적 확대
- 품질 지표: QWK ≥ 0.75, 피드백 만족도 ≥ 80%
- Flutter 연동: REST API 공용화 설계

## 특별 요청사항
1. 채점 프롬프트는 JSON Schema로 엄격히 구조화
2. 모든 스팬에 대한 근거 추적 가능하도록 구현
3. 실시간 프리체크로 UX 개선
4. 대학별 출제경향 온톨로지 축적으로 예측력 향상
5. 리비전 제출로 학습 효과 측정 (평균 +15% 향상 목표)

이 시스템을 Next.js와 Supabase를 중심으로 구축하되, 향후 Flutter 앱 연동이 가능하도록 API를 설계해주세요. 코드는 TypeScript를 사용하고, 모든 컴포넌트는 재사용 가능하도록 모듈화해주세요.
```

## 추가 제안사항

PRD를 검토하면서 다음과 같은 개선사항을 제안드립니다:

### 1. **실시간 협업 기능**
```markdown
- 강사-학생 간 실시간 피드백 세션
- 동료 평가(Peer Review) 시스템
- 실시간 질의응답 채팅
```

### 2. **AI 고도화**
```markdown
- Fine-tuned 모델 활용 (도메인 특화)
- 다국어 지원 (영어 에세이 확장)
- 표절 검사 통합
- 문체 분석 및 개선 제안
```

### 3. **학습 분석 강화**
```markdown
- 학습 궤적 분석 (Learning Analytics)
- 예측 모델: 다음 시험 예상 점수
- 맞춤형 학습 경로 추천
- A/B 테스트를 통한 피드백 효과성 측정
```

### 4. **통합 및 확장**
```markdown
- LMS(Learning Management System) 연동
- 대학 입시 컨설팅 데이터 연계
- 모의고사 성적과의 상관관계 분석
- 학부모 대시보드
```

### 5. **기술적 개선**
```markdown
- WebSocket 활용한 실시간 채점 진행상황
- Redis 캐싱으로 응답속도 개선
- Webhook으로 외부 시스템 연동
- 마이크로서비스 아키텍처 고려
```

이 프롬프트를 Claude Code의 plan mode에 넣으면 전체 프로젝트를 체계적으로 생성할 수 있을 것입니다. 필요하다면 특정 부분을 더 상세하게 작성해드릴 수도 있습니다!